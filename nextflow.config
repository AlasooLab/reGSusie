manifest {
  name = 'reGSusie'
  author = 'Ida Rahu'
  homePage = 'https://github.com/idarahu/reGSusie'
  description = 'Nextflow pipeline for GWAS that utilises REGENIE, LDstore2 and SuSiE'
  mainScript = 'main.nf'
  version = '1.0.0'
  nextflowVersion = '22.04.3'
}

// ANALYSIS PARAMETERS

// If set to 'false', only the LDstore and SuSiE components of the pipeline are executed.
params.full_pipeline = true

// A text file (.txt) where each row corresponds to the regenie output file that should be used as input for LDstore and SuSiE when the previous parameter was set to 'false'.
params.regenie_outputs = 'path/to/txt/file/containing/names/of/regenie/output/files'


// REGENIE STEP 1
// Select the input format for regenie step1: 'bed', 'pgen' or 'bgen'
params.step1_input_format = 'bgen'

// When selecting 'bed' as the input format, it assumes that the input folder contains the required files with the extensions .bed, .bim, and .fam.
params.step1_bed = 'path/to/bed/bim/and/fam/files'

// When selecting 'pgen' as the input format, it assumes that the input folder contains the required files with the extensions .pgen, .pvar, and .psam.
params.step1_pgen = 'path/to/pgen/pvar/and/psam/files'

// When selecting 'bgen' as the input format, it assumes that the input folder contains the required files with the extensions .bgen, .sample, and .bgi.
params.step1_bgen = 'path/to/bgen/file'
params.step1_sample = 'path/to/sample/file'


// REGENIE STEP 1 and 2
params.phenotype_file = 'path/to/phenotype/file'
params.phenotype_list = 'path/to/txt/file/that/contains/phenotype/list' //text file containing comma-separated list
params.covariate_file = 'path/to/covariate/file'
params.covariate_list = 'list,of,covariates' //comma-separated list
params.bsize = 4000 //size of the genotype blocks


// REGENIE STEP 2
params.samples_to_keep = './data/samples_to_keep.tsv'
params.minINFO = 0.6 //minimum imputation info score


// REGENIE STEP 2 and LDSTORE
// All the files for regenie step 2 must adhere to the format chr*.bgen/chr*.sample/chr*.bgen.bgi, where * represents the chromosome number.
params.step2_bgen = 'path/to/bgen/files/chr*.bgen'
params.step2_sample = 'path/to/sample/files/chr*.sample'
params.step2_bgi = 'path/to/bgi/files/chr*.bgen.bgi'


// REGION FILTER
params.p_value = 5e-08 //p-value for defining the genome-wide significant locus
params.window_size = 1500000 //half of the size of the fine-mapping region > default total window is 3 Mb around a lead variant
// All the overlapping regions are merged together
params.max_region_width = 6000000 //maximal fine-mapping region width, default is 6 Mb
params.window_shrink_ratio = 0.95 //shrink ratio applied when regions exceed the maximal width (original regions are reduced recursively)
params.bgen_chr_has_zero = 'T' //should be set to 'T' (true) if chromosomes 1..9 are given as 01..09 in bgens
params.remove_MHC = 'T' //if set to 'T' (true), then the histocompatibility complex (MHC) region is excluded from the analysis

// Select the right GRCh
params.GRCh = 37 //37 or 38

// MHC regions in GRCh37 and GRCh38
// GRCh37
params.MHC_start = 28477797
params.MHC_end = 33448354

// GRCh38
//params.MHC_start = 28510120
//params.MHC_end = 33480577


// LDSTORE
params.samples_ld_incl = 'path/to/the/text/file/with/samples/that/should/be/included' //check the LDStore2 documentation


// SUSIE
params.n_covariates = 11 //number of covariates
params.max_causal_SNPs = 10 //number of maximum causal variants


// Output directories
params.outdir = 'results'
params.prefix1 = 'regenie'
params.prefix2 = 'finemapping'

process.executor = 'slurm'
process.queue = 'amd'

includeConfig './base.config'

singularity {
  enabled = true
  autoMounts = true
  cacheDir = "$baseDir/singularity_img/"
}

def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
