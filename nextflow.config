// Analysis parameters

// Define the regenie step 1 .bgen and .sample files 
params.step1_bgen = 'step1.bgen' 
params.step1_sample = 'step1.sample'

// Define all the chromosomes .bgen, .sample amd .bgen.bgi files for the workflow
params.step2_bgen = 'chr*.bgen'
params.step2_sample = 'chr*.sample'
params.step2_bgi = 'chr*.bgen.bgi'

// Define the list of individuals that are going to be used for analysis (needed for regenie step 2)
params.samples_to_keep = 'samples_to_keep.tsv'

// Define the list of individuals that are going to be used for analysis (needed for LDstore)
params.samples_ld_incl = 'samples_ld_incl.incl'

params.phenotype_file = 'phenotypes.tsv'
params.phenotype_list = 'phenotypeList.txt'
params.covariate_file = 'covariates.tsv'
params.covariate_list = 'PC1,PC2,PC3,PC4,PC5,PC6,PC7,PC8,PC9,PC10,sex'

params.bsize = 4000
params.minINFO = 0.6
params.p_value = 5e-08
params.window_size = 1500000
params.n_covariates = 11
params.max_causal_SNPs = 10
params.remove_MHC = 'T'

// Select the right GRCh for SuSiE
params.GRCh = 37

// GRCh38
//params.MHC_start = 28510120
//params.MHC_end = 33480577

// GRCh37
params.MHC_start = 28477797
params.MHC_end = 33448354


params.outdir = './results_all/'
params.prefix1 = 'regenie'
params.prefix2 = 'finemapping'

process.executor = 'slurm'
process.queue = 'amd'

includeConfig './base.config'

singularity {
  enabled = true
  autoMounts = true
  cacheDir = "$baseDir/singularity_img/"
}

def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
